// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	models "github.com/clambin/covid19/models"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// CovidStore is an autogenerated mock type for the CovidStore type
type CovidStore struct {
	mock.Mock
}

// Add provides a mock function with given fields: entries
func (_m *CovidStore) Add(entries []*models.CountryEntry) error {
	ret := _m.Called(entries)

	var r0 error
	if rf, ok := ret.Get(0).(func([]*models.CountryEntry) error); ok {
		r0 = rf(entries)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields:
func (_m *CovidStore) GetAll() ([]*models.CountryEntry, error) {
	ret := _m.Called()

	var r0 []*models.CountryEntry
	if rf, ok := ret.Get(0).(func() []*models.CountryEntry); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.CountryEntry)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFirstEntry provides a mock function with given fields:
func (_m *CovidStore) GetFirstEntry() (time.Time, bool, error) {
	ret := _m.Called()

	var r0 time.Time
	if rf, ok := ret.Get(0).(func() time.Time); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Time)
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func() bool); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(bool)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func() error); ok {
		r2 = rf()
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetLatestForCountries provides a mock function with given fields: countries
func (_m *CovidStore) GetLatestForCountries(countries []string) (map[string]*models.CountryEntry, error) {
	ret := _m.Called(countries)

	var r0 map[string]*models.CountryEntry
	if rf, ok := ret.Get(0).(func([]string) map[string]*models.CountryEntry); ok {
		r0 = rf(countries)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]*models.CountryEntry)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]string) error); ok {
		r1 = rf(countries)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
