name: Release

on:
  push:
    tags:
      - '*'

jobs:
  test:
    runs-on: ubuntu-latest
    container: golang:1.20
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_DB: postgres
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v4
        with:
          go-version: "1.20"
      - name: test
        run: |
          export pg_host=postgres
          export pg_port=5432
          export pg_database=postgres
          export pg_user=postgres
          export pg_password=postgres
          export SHOUTRRR_SLACK_URL=${{ secrets.SHOUTRRR_SLACK_URL }}
          go test ./... -race -coverprofile=coverage.txt -covermode=atomic
      - uses: codecov/codecov-action@v3
        with:
          file: coverage.txt
          token: ${{ secrets.CODECOV_TOKEN }}
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v4
        with:
          go-version: "1.20"
      - uses: golangci/golangci-lint-action@v3
        with:
          args: --issues-exit-code=0
  vet:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v4
        with:
          go-version: "1.20"
      - name: vet
        run: go vet ./...
  build:
    needs: test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [ covid19 ]
        goos: [ linux ]
        goarch: [ amd64, arm, arm64 ]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v4
        with:
          go-version: "1.20"
      - name: Version number
        run: |
          echo "build_version=${GITHUB_REF##*/}" >> $GITHUB_ENV
      - name: build
        env:
          TARGET: ${{ matrix.target }}
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          VERSION: ${{ env.build_version }}
        run: |
          CGO_ENABLED=0 go build \
              -ldflags "-X github.com/$GITHUB_REPOSITORY/version.BuildVersion=$VERSION" \
              -o bld/$TARGET-$GOOS-$GOARCH \
              cmd/$TARGET/$TARGET.go
        shell: bash
      - name: artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.target }}-${{ matrix.goos }}-${{ matrix.goarch }}
          path: ./bld/*
  docker:
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [ covid19 ]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
        with:
          name: ${{ matrix.target }}-linux-arm
          path: ./bld
      - uses: actions/download-artifact@v3
        with:
          name: ${{ matrix.target }}-linux-arm64
          path: ./bld
      - uses: actions/download-artifact@v3
        with:
          name: ${{ matrix.target }}-linux-amd64
          path: ./bld
      - name: Fix permissions
        run: chmod +x bld/*
        shell: bash
      - uses: docker/setup-qemu-action@v2
      - uses: docker/setup-buildx-action@v2
      - uses: docker/login-action@v2.1.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - uses: docker/metadata-action@v4.4.0
        id: docker_meta
        with:
          images: ghcr.io/clambin/${{ matrix.target }}
          tags: |
            type=sha,suffix=-{{date 'YYYYMMDDHHmmssSS'}}
            type=semver,pattern={{version}}
      - uses: docker/build-push-action@v4.0.0
        with:
          context: .
          file: build/Dockerfile-${{ matrix.target }}
          platforms: linux/amd64,linux/arm,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}
          build-args: |
            BUILD_VERSION=${{ steps.docker_meta.outputs.version }}
  publish:
    runs-on: ubuntu-latest
    needs:
      - docker
    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
        with:
          path: ./artifacts
      - name: Move binaries into place
        run: |
          mkdir bld
          mv artifacts/*/* bld
        shell: bash
      - uses: marvinpinto/action-automatic-releases@v1.2.1
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          prerelease: false
          files: |
            bld/*
